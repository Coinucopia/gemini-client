#!/usr/bin/env node

"use strict";

const Promise = require("bluebird");
const GeminiAPI = require("gemini-api").default;
const BigNumber = require("bignumber.js");
const yargs = require("yargs");
const chalk = require("chalk");
const defaultValue = require("default-value");
const table = require("table").table;
const dateFns = require("date-fns");

const config = require("../config.json");
const parseOrderSpec = require("../lib/parse-order-spec");
const normalizeQuantity = require("../lib/normalize-quantity")({});
const findSymbol = require("../lib/find-symbol");
const validSymbols = require("../lib/valid-symbols");

let client = new GeminiAPI({
	key: config.api.key,
	secret: config.api.secret,
	sandbox: config.api.sandbox
});

function orderOptions(yargs) {
	return yargs
		.option("immediate", {
			alias: "immediate-or-cancel",
			description: "Fill however much of the order can be filled, and immediately cancel the remainder",
			conflicts: ["immediate-full", "no-immediate"]
		})
		.option("immediate-full", {
			alias: "fill-or-kill",
			description: "Fill the *entire* order immediately if possible, otherwise cancel the entire order",
			conflicts: ["immediate", "no-immediate"]
		})
		.option("no-immediate", {
			alias: ["maker-or-cancel", "post-only"],
			description: "Only place the order if it cannot be filled (at all) yet, otherwise cancel it. Avoids taker fees",
			conflicts: ["immediate", "immediate-full"]
		});
}

let yargsConfig = yargs
	.recommendCommands()
	.demandCommand(1, "You must provide a valid command")
	.command("list", "List all currently-open orders")
	.command("buy", "Place a new buy order", (yargs) => {
		return orderOptions(yargs);
	})
	.command("sell", "Place a new sell order", (yargs) => {
		return orderOptions(yargs);
	});

let args = yargsConfig.argv;

let command = args._[0];

function getAllPastTrades({ amount } = {}) {
	let amount_ = defaultValue(amount, 10);

	return Promise.map(validSymbols, (symbol) => {
		return Promise.try(() => {
			return client.getMyPastTrades({
				limit_trades: amount_,
				symbol: symbol
			});
		}).delay(1).then((trades) => {
			/* NOTE: The delay and concurrency limit  are to ensure that the nonce (which is based on the timestamp) increases, by ensuring that only one request is happening per ms, otherwise Gemini will complain */
			return { symbol, trades };
		});
	}, { concurrency: 1 }).reduce((all, { symbol, trades }) => {
		return all.concat(trades.map((trade) => {
			return Object.assign({ symbol }, trade);
		}));
	}, []).then((trades) => {
		return trades.sort((a, b) => b.timestampms - a.timestampms);
	});
}

function generateProgress(total, completed) {
	let progress;

	if (completed != null) {
		progress = completed.div(total);
	} else {
		/* Past trade */
		progress = new BigNumber(1);
	}

	let progressBlocks = Math.ceil(progress.div(0.125).toNumber());

	return `${"▓".repeat(progressBlocks)}${"░".repeat(8 - progressBlocks)} ${progress.times(100).decimalPlaces(0).toString().padStart(3)}%`;
}

function generateTradesTable(trades, type) {
	let baseHeaders = [ "Date", "", "Amount", "Target price", "Progress" ];

	let headers = (type === "active")
		? baseHeaders.concat([ "Amount completed" ])
		: baseHeaders.concat([ "Side", "Fee paid" ])
	// Date / Direction / Amount (in BTC) / Price / Progress / Average execution price
	//   price -- <= and => depending on direction
	
	let formattedHeaders = headers.map((text) => chalk.bold(text));

	return table([ formattedHeaders ].concat(trades.map((trade) => {
		let direction = (trade.side != null)
			? trade.side
			: trade.type.toLowerCase();

		let currency = trade.symbol.replace("usd", "").toUpperCase();
		let amount = new BigNumber(defaultValue(trade.original_amount, trade.amount));
		let priceQualifier = (direction === "buy") ? "<=" : ">=";
		let executedAmount = (trade.executed_amount != null) ? new BigNumber(trade.executed_amount) : null;
		// let averageExecutionPrice = (trade.avg_execution_price !== "0.00") ? trade.avg_execution_price : null;

		let baseData = [
			dateFns.format(new Date(trade.timestampms), "MM-DD-YYYY HH:mm:ss"),
			direction,
			`${amount.toString()} ${currency}`,
			`${priceQualifier} $${trade.price}`,
			generateProgress(amount, executedAmount)
		];

		return (type === "active")
			? baseData.concat([
				(executedAmount != null) ? `${executedAmount.toString()} ${currency}` : ""
			])
			: baseData.concat([
				(trade.aggressor === true) ? "Taker" : "Maker",
				`${trade.fee_currency} ${trade.fee_amount}`
			]);
	})));
}

function printActiveTrades(trades) {
	console.log(chalk.bold("Active trades:"));
	console.log("");
	console.log(generateTradesTable(trades, "active"));
}

function printPastTrades(trades) {
	console.log(chalk.bold("Past trades:"));
	console.log("");
	console.log(generateTradesTable(trades, "past"));
}

return Promise.try(() => {
	if (command === "list") {
		return Promise.try(() => {
			return Promise.all([
				client.getMyActiveOrders(),
				getAllPastTrades()
			]);
		}).then(([ activeOrders, pastTrades ]) => {
			console.log("");
			printActiveTrades(activeOrders);
			console.log("");
			printPastTrades(pastTrades);
		});
	} else if (command === "buy" || "sell") {
		/*
			$ ./gemini buy 500 USD in BTC @ 300 USD
			{ _: [ 'buy', 500, 'USD', 'in', 'BTC', '@', 300, 'USD' ],
			'$0': 'gemini' }
			{ amount: 
				{ baseValue: { currency: 'USD', amount: 500 },
					targetCurrency: 'BTC' },
				rate: { currency: 'USD', amount: 300 } }
		*/

		// console.log(args);
		
		let orderData = parseOrderSpec(args._.slice(1));
		let normalized = normalizeQuantity(orderData); // { rate, amount }
		
		let priceCurrency = normalized.rate.currency;
		let quantityCurrency = normalized.quantity.currency;

		let { symbol, invert } = findSymbol(quantityCurrency, priceCurrency);

		let effectiveTargetRate = (invert === true)
			? (new BigNumber(1)).div(normalized.rate.amount)
			: normalized.rate.amount;

		let orderOptions;

		if (args.immediate === true) {
			orderOptions = ["immediate-or-cancel"];
		} else if (args.immediateFull) {
			orderOptions = ["fill-or-kill"]
		} else if (args.immediate === false) { /* --no-immediate flag */
			orderOptions = ["maker-or-cancel"];
		} else {
			orderOptions = [];
		}

		let decimalPlaces = (normalized.quantity.currency === "ETH")
			? 6 /* This should be 18, but Gemini only accepts 6 */
			: 8;

		let order = {
			symbol: symbol,
			amount: normalized.quantity.amount.decimalPlaces(decimalPlaces).toString(),
			price: effectiveTargetRate.toString(),
			side: command,
			type: "exchange limit",
			options: orderOptions
		};
		
		return Promise.try(() => {
			return client.newOrder(order);
		}).then((result) => {
			console.log("");

			if (result.is_cancelled) {
				console.log(chalk.bold("Order was executed:"));
			} else {
				console.log(chalk.bold("New order placed:"));
			}

			console.log("");
			console.log(generateTradesTable([ result ], "active"));

			if (result.is_cancelled) {
				let cancellationMode = "The order was cancelled.";
				let reason = "Unknown";

				if (args.immediate === false) {
					cancellationMode = "The order has been automatically cancelled.";
					reason = "The order would have been immediately filled, and you specified a maker-only flag";
				} else if (args.immediate === true) {
					cancellationMode = "The remainder of the order has been automatically cancelled.";
					reason = "The order could not be immediately filled fully, and you specified an immediate-or-cancel flag";
				} else if (args.immediateFull === true) {
					cancellationMode = "The order has been automatically cancelled.";
					reason = "The order could not be immediately filled fully, and you specified a fill-or-kill flag";
				}

				console.log(chalk.bold.red(cancellationMode));
				console.log(`Reason: ${reason}`);
				console.log("");
			}
		});
	}	
}).catch({ name: "ParsingError" }, (err) => {
	yargsConfig.showHelp();
	console.error("");

	console.error(
		chalk.red.bold(`Input error for "${err.input}": `) +
		chalk.red(err.message)
	);

	process.exitCode = 1;
}).catch((err) => !(err instanceof Error), (error) => {
	console.error(error);
	throw error;
});
